// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

namespace Microsoft.Quantum.QsCompiler.TargetGeneration

open Microsoft.CodeAnalysis
open Microsoft.CodeAnalysis.CSharp.Syntax
open Microsoft.CodeAnalysis.Formatting

open Microsoft.Quantum.RoslynWrapper

open System
open System.Collections.Generic
open System.IO
open Microsoft.CodeAnalysis
open Microsoft.Quantum.QsCompiler
open Microsoft.Quantum.QsCompiler.CsharpGeneration
open Microsoft.Quantum.QsCompiler.DataTypes
open Microsoft.Quantum.QsCompiler.Diagnostics
open Microsoft.Quantum.QsCompiler.ReservedKeywords
open Microsoft.Quantum.QsCompiler.SyntaxTree
open Microsoft.Quantum.QsCompiler.Transformations.BasicTransformations
open System.Collections.Immutable
open Microsoft.Quantum.QsCompiler.CsharpGeneration

module GenerateTarget =
    let private autoNamespaces =
        [
            "System"
            "Microsoft.Quantum.Core"
            "Microsoft.Quantum.Intrinsic"
            "Microsoft.Quantum.Simulation.Core"
        ]

    /// The comment that is displayed at the top of generated files.
    let private autogenComment = [
        "//------------------------------------------------------------------------------"
        "// <auto-generated>                                                             "
        "//     This code was generated by a tool.                                       "
        "//     Changes to this file may cause incorrect behavior and will be lost if    "
        "//     the code is regenerated.                                                 "
        "// </auto-generated>                                                            "
        "//------------------------------------------------------------------------------"
    ]

    // Builds the top-level compilation unit structure
    let private buildHeader (baseClassOpt : string option) ns =
        let namespaces = match baseClassOpt  with
                         | Some s -> s.Substring(0, s.LastIndexOf('.')) :: autoNamespaces
                         | None -> autoNamespaces
        let usings = namespaces |> List.map (fun ns -> ``using`` ns)

        ``compilation unit``
            []
            usings
            [ns]
        // We add a "pragma warning disable 1591" since we don't generate doc comments in our C# code.
        |> ``pragmaDisableWarning`` 1591
        |> ``pragmaDisableWarning`` 0162 // unreachable code
        |> ``pragmaDisableWarning`` 0436 // shadowing existing classes from references
        |> ``with leading comments`` autogenComment

    let private buildNamespace name target =
        ``namespace`` name
            ``{``
                []
                [target]
            ``}``

    let private buildClass targetClass targetBaseClass members = 
        let baseClass = match targetBaseClass with | Some s -> s | None -> "SimulatorBase"
                        |> simpleBase |> Some
        ``class`` targetClass ``<<`` [] ``>>`` ``:`` baseClass ``,`` [] [``abstract``; ``public``] ``(`` members ``)``

    let buildIntrinsic intrinsic : MemberDeclarationSyntax seq =
        Seq.empty

    let private namespaceElementIsIntrinsic elem =
        match elem with
        | QsCallable callable -> 
            if callable.Specializations |> Seq.exists (fun spec -> match spec.Implementation with
                                                                   | Intrinsic -> true
                                                                   | _ ->         false)
            then Some callable
            else None
        | _ -> None

    let private findIntrinsics syntaxTree =
        syntaxTree 
        |> Seq.collect (fun ns -> ns.Elements |> Seq.choose namespaceElementIsIntrinsic)

    let GenerateTarget syntaxTree outputFile targetClass targetNamespace targetBaseClass =
        let intrinsics = syntaxTree |> findIntrinsics
        let members = intrinsics |> Seq.collect buildIntrinsic
        let target = buildClass targetClass targetBaseClass members
        let ns = buildNamespace targetNamespace target
        let syntax = buildHeader targetBaseClass ns
        let text = syntax |> SimulationCode.formatSyntaxTree
        File.WriteAllText(outputFile, text)
